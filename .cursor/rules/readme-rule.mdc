---
description: 
globs: 
alwaysApply: false
---
# README作成ルール（汎用版）

## 基本方針
- **サービスとしての価値**を明確に伝える
- **技術的な深さと理解度**を示す
- **チーム開発での実用性**を重視
- **ポートフォリオとしての魅力**を高める
- **プロジェクトタイプに関係なく**適用可能
- 日本語での説明を基本とし、必要に応じて英語併記

## 必須セクション

### 1. サービス紹介
```markdown
# プロジェクト名

<!-- OGイメージ -->
![OGイメージ](mdc:docs/images/og-image.png)

## 🌐 サービスURL
**本番環境**: https://your-app.vercel.app  
**開発環境**: https://dev-your-app.vercel.app

## 📝 サービス概要
### どういうアプリなのか
- **一行説明**: チーム向けの直感的な課題管理システム
- **解決する課題**: 従来の課題管理ツールの複雑さを解消し、シンプルで使いやすいインターフェースを提供
- **対象ユーザー**: 小〜中規模の開発チーム、プロジェクトマネージャー

### 開発背景
- 解決したい具体的な課題や問題
- 既存ソリューションの不足点や限界
- このプロジェクトで実現したいビジョン

### どのように使えるのか
1. **主要機能1**: 具体的な操作方法やユーザーメリット
2. **主要機能2**: 実際の使用シーンと解決する課題
3. **主要機能3**: ユーザーが得られる価値や体験
4. **その他機能**: 補助的な機能や将来的な拡張予定
```

### 2. 技術スタックと選定理由
```markdown
## 🛠️ 技術スタック

### フロントエンド（例）
| カテゴリ | 技術例 | 選定理由 |
|----------|--------|----------|
| **フレームワーク** | React/Vue.js/Angular/Svelte | 開発効率、コミュニティ、学習コスト |
| **UI/CSS** | Tailwind/Material-UI/Ant Design/Styled Components | デザインシステム、開発スピード |
| **状態管理** | Redux/Zustand/Pinia/Context API | アプリケーションの複雑さ、パフォーマンス |
| **ルーティング** | React Router/Vue Router/Next.js Router | SPA/MPA選択、SEO要件 |
| **フォーム** | React Hook Form/Formik/VeeValidate | バリデーション、UX、パフォーマンス |

### バックエンド（例）
| カテゴリ | 技術例 | 選定理由 |
|----------|--------|----------|
| **言語/フレームワーク** | Node.js/Python/Java/Go/C# | チーム経験、パフォーマンス要件 |
| **Webフレームワーク** | Express/FastAPI/Spring Boot/Gin/ASP.NET | 開発速度、機能の豊富さ |
| **データベース** | PostgreSQL/MySQL/MongoDB/Redis | データ構造、スケーラビリティ |
| **認証** | JWT/OAuth/Auth0/Firebase Auth | セキュリティ要件、開発工数 |
| **API設計** | REST/GraphQL/gRPC | フロントエンド要件、パフォーマンス |

### インフラ・デプロイ（例）
| カテゴリ | 技術例 | 選定理由 |
|----------|--------|----------|
| **ホスティング** | Vercel/Netlify/AWS/GCP/Heroku | コスト、スケーラビリティ、管理工数 |
| **コンテナ** | Docker/Kubernetes | 環境統一、スケーラビリティ |
| **CI/CD** | GitHub Actions/GitLab CI/Jenkins | 自動化レベル、チーム規模 |
| **監視** | Sentry/DataDog/New Relic | エラー追跡、パフォーマンス監視 |

### 開発ツール
- **言語**: TypeScript/JavaScript/Python/Java等（型安全性、エコシステム）
- **リンター**: ESLint/Prettier/Black/Checkstyle（コード品質統一）
- **パッケージマネージャー**: npm/yarn/pnpm/pip/Maven（依存関係管理）
- **テスト**: Jest/Vitest/pytest/JUnit（品質保証、リグレッション防止）
```

### 3. アーキテクチャ・設計図
```markdown
## 🏗️ システム構成

### インフラ構成図
\`\`\`mermaid
graph TB
    subgraph "Client Layer"
        A[Webアプリ/モバイルアプリ] --> B[CDN/Load Balancer]
    end
    
    subgraph "Application Layer"
        C[アプリケーションサーバー] --> D[API Gateway]
        C --> E[認証サービス]
        C --> F[ビジネスロジック]
    end
    
    subgraph "Data Layer"
        G[データベース]
        H[キャッシュ]
        I[ファイルストレージ]
    end
    
    subgraph "External Services"
        J[外部API]
        K[認証プロバイダー]
    end
    
    B --> D
    D --> C
    E --> K
    F --> G
    F --> H
    F --> I
    C --> J
\`\`\`

### ER図（例）
\`\`\`mermaid
erDiagram
    users {
        id PK "主キー"
        email string "メールアドレス"
        name string "ユーザー名"
        profile_data json "プロフィール情報"
        created_at timestamp "作成日時"
        updated_at timestamp "更新日時"
    }
    
    entities {
        id PK "主キー"
        name string "エンティティ名"
        description text "説明"
        status enum "ステータス"
        user_id FK "所有者ID"
        created_at timestamp "作成日時"
    }
    
    relationships {
        id PK "主キー"
        entity1_id FK "エンティティ1のID"
        entity2_id FK "エンティティ2のID"
        relation_type enum "関係性の種類"
        created_at timestamp "作成日時"
    }
    
    users ||--o{ entities : owns
    entities ||--o{ relationships : has
\`\`\`

### 画面遷移図（例）
\`\`\`mermaid
graph LR
    A[ログイン/サインアップ] --> B[ホーム/ダッシュボード]
    B --> C[リスト/一覧画面]
    C --> D[詳細画面]
    D --> E[編集画面]
    B --> F[新規作成画面]
    B --> G[設定画面]
    G --> H[プロフィール編集]
    G --> I[システム設定]
\`\`\`

### プロジェクト構造（例）

#### Webアプリケーション（React系）
\`\`\`
src/
├── components/            # 再利用可能なコンポーネント
│   ├── ui/               # UIコンポーネント
│   ├── forms/            # フォーム関連
│   └── layout/           # レイアウトコンポーネント
├── pages/                # ページコンポーネント（またはapp/）
├── hooks/                # カスタムフック
├── stores/               # 状態管理（Redux/Zustand等）
├── services/             # API通信ロジック
├── utils/                # ユーティリティ関数
├── types/                # TypeScript型定義
├── constants/            # 定数定義
└── assets/               # 静的リソース
\`\`\`

#### API/バックエンド（Node.js例）
\`\`\`
src/
├── controllers/          # コントローラー
├── models/               # データモデル
├── routes/               # ルーティング
├── middleware/           # ミドルウェア
├── services/             # ビジネスロジック
├── utils/                # ユーティリティ
├── config/               # 設定ファイル
└── database/             # DB関連（migration等）
\`\`\`

#### モバイルアプリ（React Native例）
\`\`\`
src/
├── screens/              # 画面コンポーネント
├── components/           # 再利用コンポーネント
├── navigation/           # ナビゲーション設定
├── hooks/                # カスタムフック
├── store/                # 状態管理
├── services/             # API通信
└── utils/                # ユーティリティ
\`\`\`

### データ構造（例）
- **Users/Accounts**: ユーザー情報、認証情報、権限
- **Core Entities**: メインとなるビジネスオブジェクト
- **Relationships**: エンティティ間の関連性、履歴
- **System Data**: 設定情報、ログ、メタデータ
```

### 4. チーム開発向けセットアップ
```markdown
## 🚀 環境構築

### 前提条件
- **開発言語のランタイム**: Node.js/Python/Java/Go等（バージョン明記）
- **パッケージマネージャー**: npm/yarn/pip/Maven等
- **Git**: バージョン管理
- **エディタ**: VS Code/IntelliJ/Vim等（推奨拡張機能があれば記載）
- **データベース**: PostgreSQL/MySQL/MongoDB等（必要に応じて）

### クイックスタート

1. **リポジトリのクローン**
\`\`\`bash
git clone https://github.com/your-org/your-project.git
cd your-project
\`\`\`

2. **依存関係のインストール**
\`\`\`bash
# Node.js の場合
npm install  # または yarn install、pnpm install

# Python の場合
pip install -r requirements.txt

# Java の場合
mvn install  # または gradle build
\`\`\`

3. **環境変数の設定**
\`\`\`bash
cp .env.example .env  # または .env.local
\`\`\`

4. **外部サービスのセットアップ**
   - データベースの作成・設定
   - 認証プロバイダーの設定
   - 外部APIキーの取得
   - 必要な環境変数の設定

5. **データベースの初期設定**
\`\`\`bash
# マイグレーション実行
npm run db:migrate  # または適切なコマンド
npm run db:seed     # 初期データ投入（必要に応じて）
\`\`\`

6. **開発サーバーの起動**
\`\`\`bash
npm run dev    # Node.js
python app.py  # Python
mvn spring-boot:run  # Java Spring Boot
\`\`\`

### チーム向けの推奨設定

#### VS Code拡張機能
\`\`\`json
{
  "recommendations": [
    "bradlc.vscode-tailwindcss",
    "esbenp.prettier-vscode",
    "ms-vscode.vscode-typescript-next",
    "ms-vscode.vscode-eslint"
  ]
}
\`\`\`

#### Git Hooks設定
\`\`\`bash
# Husky + lint-stagedで品質保証
pnpm add -D husky lint-staged
npx husky init
\`\`\`

#### 開発用スクリプト（例）
- \`npm run dev\`: 開発サーバー起動
- \`npm run build\`: 本番ビルド
- \`npm run test\`: テスト実行
- \`npm run lint\`: コード品質チェック
- \`npm run type-check\`: 型チェック（TypeScript使用時）
- \`npm run db:migrate\`: データベースマイグレーション
```

### 5. 機能・こだわりポイント
```markdown
## ✨ 主要機能と工夫した点

### 🎯 コア機能
| 機能 | 説明 | 工夫したポイント |
|------|------|------------------|
| **メイン機能1** | 核となる機能の説明 | 技術的なこだわりや独自性 |
| **メイン機能2** | ユーザー価値の高い機能 | パフォーマンス・UX改善点 |
| **メイン機能3** | 差別化要因となる機能 | 実装上の工夫や技術選択理由 |
| **システム機能** | 認証・権限・通知等 | セキュリティ・可用性への配慮 |

### 🔧 技術的なこだわり

#### パフォーマンス最適化
- **初期表示速度**: SSR/SSG、画像最適化、コード分割
- **実行時パフォーマンス**: キャッシュ戦略、遅延読み込み
- **バンドルサイズ**: Tree Shaking、Dynamic Import
- **監視・分析**: パフォーマンス計測ツールの導入

#### UX/UI設計
- **アクセシビリティ**: 標準準拠、スクリーンリーダー対応
- **レスポンシブ**: モバイルファースト、各デバイス最適化
- **デザインシステム**: 一貫したUI/UXの実現
- **インタラクション**: 直感的な操作感、フィードバック

#### データ・セキュリティ設計
- **データ整合性**: 適切な制約、トランザクション管理
- **セキュリティ**: 認証・認可、入力検証、暗号化
- **パフォーマンス**: インデックス設計、クエリ最適化
- **可用性**: エラーハンドリング、障害復旧

### 🚀 パフォーマンス指標
- **Webアプリの場合**: Lighthouse Score、Core Web Vitals、Bundle Size
- **APIの場合**: レスポンス時間、スループット、エラー率
- **モバイルアプリの場合**: 起動時間、メモリ使用量、バッテリー消費
- **具体的数値**: 目標値と現在値を併記（例：応答時間 < 200ms）
```

### 6. 開発・運用ガイド
```markdown
## 📋 開発ガイドライン

### コーディング規約
- **言語固有の厳格設定**: TypeScript Strict/Python Black/Java Checkstyle等
- **コード品質**: 静的解析ツール、フォーマッター使用
- **コミット規約**: Conventional Commits、セマンティックバージョニング
- **命名規則**: 一貫したネーミング、パス管理

### アーキテクチャ設計方針
- **設計パターン**: Clean Architecture/MVC/MVVM等の採用理由
- **責務分離**: 関心の分離、単一責任原則の適用
- **依存関係管理**: DI、インターフェース設計
- **エラーハンドリング**: 統一されたエラー処理戦略

### テスト戦略
- **Unit Test**: 単体テストフレームワークと範囲
- **Integration Test**: API、DB連携テスト
- **E2E Test**: ユーザーシナリオテスト
- **Performance Test**: 負荷テスト、パフォーマンス検証

### セキュリティ対策
- **通信セキュリティ**: HTTPS、証明書管理
- **認証・認可**: JWT、OAuth、ロールベースアクセス制御
- **入力検証**: サニタイゼーション、バリデーション
- **脆弱性対策**: 依存関係スキャン、セキュリティヘッダー
```

### 7. デプロイメント・CI/CD
```markdown
## 🚀 デプロイメント

### 本番環境デプロイ
- **Webアプリ**: Vercel/Netlify/AWS S3+CloudFront
- **API/サーバー**: Heroku/AWS EC2/Google Cloud Run
- **コンテナ**: Docker + Kubernetes/AWS ECS
- **静的サイト**: GitHub Pages/Vercel/Netlify

### CI/CDパイプライン（例）
\`\`\`yaml
name: CI/CD Pipeline
on: [push, pull_request]
jobs:
  test:
    - 静的解析（Lint、型チェック）
    - ユニットテスト
    - セキュリティスキャン
    - ビルド確認
  
  deploy:
    - 本番デプロイ
    - 健全性チェック
    - パフォーマンステスト
    - 監視設定
\`\`\`

### 監視・メトリクス
- **アプリケーション監視**: New Relic/DataDog/Sentry
- **インフラ監視**: CloudWatch/Prometheus
- **ログ管理**: ELK Stack/Splunk
- **ユーザー分析**: Google Analytics/Mixpanel
```

### 8. トラブルシューティング・Q&A
```markdown
## 🔧 トラブルシューティング

### よくある問題と解決方法

#### 開発環境
| 問題 | 原因 | 解決方法 |
|------|------|----------|
| ビルドエラー | TypeScript型エラー | \`pnpm type-check\`で確認 |
| 依存関係エラー | パッケージ競合 | \`pnpm install --force\` |
| Supabase接続エラー | 環境変数設定 | \`.env.local\`を確認 |

#### 本番環境
- **パフォーマンス低下**: Bundle Analyzerで分析
- **データベース接続**: Supabaseダッシュボード確認
- **認証エラー**: OAuth設定とRedirect URL確認

### FAQ
**Q: ローカル開発でSupabaseのデータが見えない**  
A: RLSポリシーを確認し、適切な権限設定を行ってください

**Q: ビルド時にメモリ不足エラー**  
A: \`NODE_OPTIONS="--max-old-space-size=4096" pnpm build\`

**Q: 画像が表示されない**  
A: Next.js Image設定とSupabase Storage権限を確認
```

## 品質チェックリスト

### 📝 READMEの必須要素
- [ ] **サービスURL**: 本番・開発環境のリンク
- [ ] **OGイメージ**: アプリの視覚的な紹介
- [ ] **一行説明**: サービスの価値を端的に表現
- [ ] **開発背景**: なぜ作ったのか、何を解決するのか
- [ ] **使い方**: ユーザーがどう使えるのか具体的に説明
- [ ] **技術選定理由**: なぜその技術を選んだのか
- [ ] **インフラ構成図**: システム全体の構成を可視化
- [ ] **ER図**: データベース設計の理解促進
- [ ] **画面遷移図**: UXフローの説明
- [ ] **工夫した点**: 技術的なこだわりを具体的に
- [ ] **パフォーマンス指標**: 数値による客観的評価

### 🎯 ポートフォリオ価値向上
- [ ] **技術の深さ**: 単なる使用ではなく、理解度を示す
- [ ] **問題解決能力**: 課題とその解決アプローチを明示
- [ ] **ドキュメンテーション**: 相手に適切に情報を伝える能力
- [ ] **チーム開発意識**: セットアップからデプロイまで網羅
- [ ] **品質への意識**: テスト・監視・セキュリティ対策

### 🔍 技術理解度の証明
- [ ] **アーキテクチャ設計**: なぜその構成なのか説明
- [ ] **パフォーマンス**: 最適化手法と効果を数値で示す
- [ ] **セキュリティ**: 実装した対策を具体的に記載
- [ ] **スケーラビリティ**: 将来の拡張性を考慮した設計
- [ ] **保守性**: コードの可読性・テスタビリティ

## 実装ガイドライン

### 継続的改善
- リリース後の改善点や学びをREADMEに反映
- ユーザーフィードバックに基づく機能追加の背景を記録
- パフォーマンス改善の取り組みと効果を数値で記録

### 図表・視覚的要素の活用
- **Mermaid図**: システム構成、データフロー、画面遷移
- **スクリーンショット**: 主要機能の使用感を視覚的に表現
- **GIFアニメ**: 操作フローやインタラクションの説明
- **チャート**: パフォーマンス改善やユーザー増加の推移

### コミュニティ・コラボレーション
- **Contributing Guide**: チーム開発での貢献方法
- **Issue Template**: バグ報告や機能要望の型
- **Code of Conduct**: プロジェクト参加のガイドライン
- **License**: 適切なライセンス選択と明記
